@using System.Security.Claims;
@using Evermore.DataModels;
@using Evermore.Modules;
@using Evermore.Services;
@using Microsoft.AspNetCore.Authentication;
@using Microsoft.AspNetCore.Authentication.Cookies;
@using Microsoft.AspNetCore.Mvc;
@inherits LayoutComponentBase
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider authStateProvider
@inject IJSRuntime js

@attribute [Authorize]

<PageTitle>Evermore</PageTitle>
<div class="page">
    <main>
        <div class="top-row px-4">
            <label class="name-text">Evermore</label>
            <CascadingAuthenticationState>
                <AuthorizeView>
                    <Authorized>
                        <button class="sign-button" @onclick="Logout">Выход</button>
                    </Authorized>
                    <NotAuthorized>
                        <button class="sign-button" @onclick="() => showSignInPopup = true">Вход</button>
                    </NotAuthorized>
                </AuthorizeView>
            </CascadingAuthenticationState>
        </div>
        <div class="second-page">
            <div class="article">
                @Body
            </div>
        </div>

    </main>
    @if (showSignInPopup)
    {
        <div class="popup-overlay">
            <div class="popup">
                @if (!isRegistrationOn)
                {
                    <h2>Введите почту и пароль</h2>
                    <label>Почта:</label>
                    <input @bind="userData.Email" />
                    <label>Пароль:</label>
                    <input type="password" @bind="userData.Password" />
                    <button @onclick="Authenticate">Войти</button>
                    <button style="margin-top: 10px;" @onclick='() => {isRegistrationOn = true; userData.Username = "";}'>Регистрация</button>
                }
                else
                {
                    <h2>Регистрация</h2>
                    <label>Почта:</label>
                    <input @bind="userData.Email" />
                    <label>Имя:</label>
                    <input @bind="userData.Username" />
                    <label>Пароль:</label>
                    <input @bind="userData.Password" />
                    <button @onclick="Registrate">Создать аккаунт</button>
                    <button style="margin-top: 10px;"  @onclick="() => isRegistrationOn = false">Войти в существующий аккаунт</button>
                }

            </div>
        </div>
    }

</div>

@code {
    private bool showSignInPopup = false;
    private bool isCampaignPage = false;

    private bool isRegistrationOn = false;

    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private DataBaseService db = new();

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private UserAccountData userData = new UserAccountData();
    private async Task Registrate()
    {
        if (!isInputAccountDataCorrect())
            return;

        if (db.AddUser(userData))
        {
            await Authenticate();
            isRegistrationOn = false;

            userData = new UserAccountData();
        }
        else
            await js.InvokeVoidAsync("alert", "Пользователь с такой почтой уже существует");

    }
    private async Task Authenticate()
    {
        userData.Username = "Null";
        if (!isInputAccountDataCorrect())
            return;
        var userAccount = db.GetUser(userData.Email, userData.Password);
        if (userAccount == null || userAccount.Password != userData.Password)
        {
            await js.InvokeVoidAsync("alert", "Неправильная почта или пароль");
            return;
        }

        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        await customAuthStateProvider.UpdateAuthenticationState(new UserSession
            {
                Username = userAccount.Username,
                Id = userAccount.UserId
            });
        showSignInPopup = false;
        navigationManager.NavigateTo("/", true);
    }

    private bool isInputAccountDataCorrect()
    {
        if (userData.Username == null || userData.Email == null || userData.Password == null)
        {
            js.InvokeVoidAsync("alert", "Не все поля заполнены");
            return false;
        }
        if (userData.Username.Replace(" ", "").Length <= 3)
        {
            js.InvokeVoidAsync("alert", "Неверно введено имя пользователя");
            return false;
        }
        if (userData.Email.Replace(" ", "").Length <= 3 || userData.Email.IndexOf('@') == -1 || (userData.Email.Substring(userData.Email.IndexOf('@')).Length < 4) || !(userData.Email.Substring(userData.Email.IndexOf('@')).Contains('.')))
        {
            js.InvokeVoidAsync("alert", "Неверно введена почта");
            return false;
        }
        if (userData.Password.Replace(" ", "").Length <= 3)
        {
            js.InvokeVoidAsync("alert", "Неверно введен пароль");
            return false;
        }
        return true;
    }

    private async Task Logout()
    {
        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        await customAuthStateProvider.UpdateAuthenticationState(null);
        navigationManager.NavigateTo("/", true);
    }
}

