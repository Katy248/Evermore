@page "/"
@using Evermore.DataModels;
@using Evermore.Services;
@using System.Security.Claims;
@inject IHttpContextAccessor HttpContextAccessor
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime js

@attribute [Authorize]


<head>
    <title>Navigation Menu</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <CascadingAuthenticationState>
        <AuthorizeView>
            <Authorized>
                <div class="center">
                    <nav>
                        @foreach (var item in campaigns)
                        {
                            var campaignId = item.Id;
                            <a href="campaign/@campaignId">
                                <h2>@item.Title</h2>
                                <p>@item.Description</p>
                            </a>
                        }
                    </nav>
                    <button class="create-btn" @onclick="() => showCreatePopup = true">Создание мира</button>
                </div>
            </Authorized>
        </AuthorizeView>
    </CascadingAuthenticationState>


    @if (showCreatePopup)
    {
        <div class="popup-overlay">
            <div class="popup">
                <h2>Введите название мира и его описание</h2>
                <label>Название:</label>
                <input type="text" @bind="newItem.Title" />
                <label>Описание:</label>
                <input type="text" @bind="newItem.Description" />
                <button @onclick="Save">Создать мир</button>

            </div>
        </div>
    }
</body>

@code {
    private bool showCreatePopup;
    private bool inputError;
    // Список всех миров
    private List<CampaignData> campaigns = new List<CampaignData>();

    // Экземпляр класса для работы с БД
    private DataBaseService db = new();

    // Вызывается при загрузке страницы, получает информацию о мирах из БД
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            var userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            campaigns = db.GetAllCampaigns(Convert.ToInt32(userId));
        }
    }

    // Переменная для хранения информации о новом мире
    private CampaignData newItem = new CampaignData();

    // Сохраняет новый мир в БД
    private async Task Save()
    {
        if (newItem.Title == null || newItem.Title.Replace(" ", "").Length <= 3)
        {
            js.InvokeVoidAsync("alert", "Ошибка в названии");
            return;
        }
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        newItem.UserId = Convert.ToInt32(userId);
        db.AddNewCampaign(newItem);

        campaigns = db.GetAllCampaigns(Convert.ToInt32(userId));
        newItem = new CampaignData();
        showCreatePopup = false;
        inputError = false;
    }
}
